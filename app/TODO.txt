TODO:
    rework the api to also get session cookies on login, to use in VideoViews and WebViews
    finish the option to only save a session cookie, so the password doesn't have to be stored and make it the default method
    let logout send a logout request to the server with the cookie
    add a method to try to force loading content from the server, for swipe-to-refresh
    add a settings button to delete all the cached data, in case the caching somehow breaks
    make another service/Job to periodically update the database or parts of it, depending on the battery state, airplane mode, data saving setting, and settings:
    store the Work-tag if the work is started and don't re-start it if it is still registered
    https://developer.android.com/topic/libraries/architecture/workmanager
    https://developer.android.com/reference/android/app/AlarmManager
    
TODO: caching
    cache the Data using Room
    put the database in the cache directory, so the OS can remove it if there isn't enough storage
    
    
    to check if the build on f-droid worked: https://f-droid.org/wiki/page/Main_Page
    https://f-droid.org/wiki/page/Category:Apps_with_failing_builds
    
    
TODO: replace ListViews with RecyclerViews: LayoutManager: LinearLayoutManager, Scrollbar: Vertical
    
    
    
TODO: for getting the mail users, use a UniqueWork that gets activated of a user cannot be found. That work then gets the list of mails, and fetches the users
    
    
TODO

    maybe use Html.fromHtml for messages?
    
    
TODO: translate help text
    
    
TODO: delete data which is not in a server response, but still in the database.
    
    
TODO: supply database migrations for every database change once the app is on f-droid
    
    
TODO: open issue with prefedined content: https://docs.github.com/en/github/managing-your-work-on-github/about-automation-for-issues-and-pull-requests-with-query-parameters
    
    
    For the notification service:
    Notifications work over this api with the session cookie: /dispatch.php/jsupdater/get
    caution: just returns an empty list if the session isn't valid
    test whether it works with basic auth: no, only works with a session cookie.
    When using basic auth: add a method to API to refresh the session cookie.
    
    For the mails: presumably all javascript-used routes only work with a session cookie.
    Use the same technique for the route to get users
    
    
    
    
    https://developer.android.com/training/data-storage/room
    https://medium.com/androiddevelopers/7-pro-tips-for-room-fbadea4bfbd1#5e38
    https://developer.android.com/jetpack/guide
    
    
    use paging for large lists:
    https://developer.android.com/topic/libraries/architecture/paging.html
    
    messages: avoid reloading ALL messages, load one at a time and stop when the first cached message is encountered
    
    after logging in, check for available API-routes and tell the user if features aren't available because the provider disabled the API route
    add a settings button to re-perform the check, so the user doesn't have to log out if an API-route is enabled
    
    rework the communication with the API with a library:
    https://github.com/square/retrofit
    https://stackoverflow.com/questions/23879567/how-to-prevent-retrofit-from-clearing-my-cookies
    https://medium.com/@dileepsattawan/how-to-handle-cookies-with-retrofit-in-android-8b1812178949
    https://stackoverflow.com/questions/38418809/add-cookies-to-retrofit-2-request/44694428
    
    instead of playing the videos in the app itself, make a content provider and share a URI to access the video to a video player app
    
    use DownloadManager for downloads and add the session cookie to authenticate it:
    https://developer.android.com/reference/android/app/DownloadManager.Request
    
    
TODO: JSONAPI: https://jsonapi.org/format
    getting only specific fields to save mobilde data: https://jsonapi.org/format/#fetching-sparse-fieldsets
    
    
    
    

split up the dialog into DialogFragments, this preserves them during a configuration change and they can be split up into their own files:
https://developer.android.com/guide/fragments/dialogs

battery saving:
https://developer.android.com/training/efficient-downloads/regular_updates
https://developer.android.com/topic/performance/power




Add the ability to transfer app data to another phone via bluetooth.
A one-time-password is generated and the user has to enter it on the app of the other phone.
A key is derived from this password and all data encrypted with it.
https://developer.android.com/guide/topics/connectivity/bluetooth

TODO Use a ViewModel to fix the configuration change bugs once and for all

IMPORTANT: If LiveData changes while an activity is in the stopped state and then returns to resumed, does it get the update?
https://developer.android.com/topic/libraries/architecture/livedata
Always up to date data
    If a lifecycle becomes inactive, it receives the latest data upon becoming active again.

https://developer.android.com/jetpack/guide#fetching_data
https://developer.android.com/topic/libraries/architecture/viewmodel
https://developer.android.com/reference/androidx/lifecycle/ViewModel
https://developer.android.com/topic/libraries/architecture/livedata


add app widgets for: messages, forums, course news, global news, calendar
https://developer.android.com/guide/topics/appwidgets
https://developer.android.com/guide/topics/appwidgets#preview
https://developer.android.com/guide/topics/appwidgets#fresh
https://developer.android.com/guide/topics/graphics/drawables#nine-patch




    TODO publish on f-droid:
        https://f-droid.org/de/docs/Repository_Style_Guide
        https://www.f-droid.org/en/docs/Inclusion_How-To
        Wait for publishing in the submission queue or make a merge request?
        https://www.f-droid.org/en/docs/Submitting_to_F-Droid_Quick_Start_Guide
        and
        https://www.f-droid.org/en/docs/Build_Server_Setup/#optionally-using-qemukvmlibvirt-instead-of-virtualbox
        to use qemu
    
    TODO app links: most Stud.IP servers have a hostname of studip.*
    Tools->App Links Assistant
         dynamically add a broadcast receiver which listens for the specific hostname the user is currently logged in as
         https://developer.android.com/reference/android/content/Context#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter,%20java.lang.String,%20android.os.Handler)
         
    
    
    

    general:
        To make a new icon from a svg, convert it to a png with GIMP and then use it in android studio
        The API also seems to work with session cookies, as it works with them in the browser.
        Fix freezing while refreshing by using a handler that gets called in the UI thread after a request is done.
    
    plugins:
        plugins don't seem to have a REST api defined, probably because there wasn't an app for so long
        
        make issues on github for the plugins to define REST-APIs:
        https://github.com/virtUOS/courseware/issues
        https://github.com/virtUOS/studip-meeting/issues
        https://github.com/elan-ev/studip-opencast-plugin/issues
        
        courseware:
            to get the courseware html for a course: /plugins.php/courseware/courseware?cid=
            cid is the course-id
        opencast:
            to get the opencast html for a course: /plugins.php/opencast/course/index/false?cid=
            cid is the course-id
            page for the individual videos:
            /paella/ui/watch.html?cid=&id=
            id is the video id
            but the video pages use a special opencast video player.
            but the links to the actual files are in the source of the course page near the download button.
            
            Use a VideoView to display the video.
            
            enable PiP-mode when using the opencast plugin, with normal media controls
            
        meetings:
            url: /plugins.php/meetingplugin/index?cid=
            BigBlueButton is already made for mobile use, so a WebView with the session cookie should be enough.
            
            TODO A WebView reloads when the parent is destroyed because of a configuration change. That would result in someone being temporarily kicked out of a meeting when the device is turned.
                 Make the meetings plugin its own activity and disable configuration changes in it.
                ( Or try a custom tab. Maybe the invite link is enough to join a meeting.) No, the session cookie is needed
                
                use android:keepScreenOn in the layout of the activity
            
            
            
            Enable PiP-Mode when a meeting is displayed and add custom controls to toggle audio, microphone, camera, screen share.
            
            screen capturing for screen share: https://developer.android.com/reference/android/media/projection/MediaProjectionManager
            
        vips:
            url: /plugins.php/vipsplugin/sheets?cid=
            
            
        
        
        maybe use WebViews to display the plugins? or just include a html parser library and filter out the important parts?
        html parsing+VideoView is viable for opencast, as you just need to get the individual video URLs.
        You can set the URI for VideoView, as well as the HTML-headers, so the cookies
        
    
    
    
    
    